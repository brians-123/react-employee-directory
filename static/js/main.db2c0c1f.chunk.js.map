{"version":3,"sources":["components/PeopleFilter.js","components/PeopleRow.js","components/PeopleTable.js","components/PeopleRequest.js","App.js","reportWebVitals.js","index.js"],"names":["PeopleFilter","props","className","type","onChange","value","filterText","placeholder","id","PeopleRow","scope","rowNumber","first","last","email","columnArray","displayName","getValue","person","name","PeopleTable","React","useState","sortColumn","setSortColumn","sortDirection","setSortDirection","setFilterText","rows","people","sortedFilteredPeople","filteredPeople","filter","toUpperCase","includes","sort","a","b","nameA","nameB","i","length","push","headers","onClick","evt","target","PeopleRequest","url","error","response","isLoading","makeRequest","axios","message","params","reload","data","results","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db2c0c1f.chunk.js","sourcesContent":["import React from \"react\";\n\n//when this is changed, let the parent component know\n\nexport function PeopleFilter(props) {\n  return (\n    <div className=\"form-group row\">\n      <div className=\"col-12\">\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          onChange={props.onChange}\n          value={props.filterText}\n          placeholder=\"Filter by first name\"\n          id=\"filter-by\"\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\r\n\r\n//first, last, username\r\nexport function PeopleRow(props) {\r\n  //Declare a new state variable, which we'll call \"rows\"\r\n  //needs parameters aka props\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">{props.rowNumber}</th>\r\n      <td>{props.first}</td>\r\n      <td>{props.last}</td>\r\n      <td>{props.email}</td>\r\n    </tr>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport { PeopleFilter } from \"./PeopleFilter\";\nimport { PeopleRow } from \"./PeopleRow\";\n\nconst firstNameColumn = {\n  displayName: \"First Name\",\n  getValue: person => {\n    return person.name.first;\n  }\n};\n\nconst lastNameColumn = {\n  displayName: \"Last Name\",\n  getValue: person => {\n    return person.name.last;\n  }\n};\n\nconst emailColumn = {\n  displayName: \"Email\",\n  getValue: person => {\n    return person.email;\n  }\n};\n\nconst columnArray = [firstNameColumn, lastNameColumn, emailColumn];\n\n//we expect props to contain the people property\nexport function PeopleTable(props) {\n  const [sortColumn, setSortColumn] = React.useState(null);\n\n  //will use the state here and change it on each button click to sort ascending or desc\n  const [sortDirection, setSortDirection] = React.useState(null);\n\n  //setting up filtering in this component prior to moving it down to PeopleFilter\n  const [filterText, setFilterText] = useState(\"\");\n\n  const onChange = evt => {\n    setFilterText(evt.target.value);\n  };\n\n  const rows = [];\n  if (!props.people) {\n    return null;\n  }\n\n  //Before returning, if filtering, use the filtered results\n  const filteredPeople = props.people.filter(person => {\n    return person.name.first.toUpperCase().includes(filterText.toUpperCase());\n  });\n\n  let sortedFilteredPeople;\n  //sort the filtered list by first name ascending\n  if (!sortColumn) {\n    sortedFilteredPeople = filteredPeople;\n  } else {\n    sortedFilteredPeople = filteredPeople.sort((a, b) => {\n      //allow sortDirection state to flip the direction of sort function\n      let nameA = sortColumn.getValue(a).toUpperCase(); // ignore upper and lowercase\n      let nameB = sortColumn.getValue(b).toUpperCase(); // ignore upper and lowercase\n      //flip the direction\n      if (sortDirection === \"descending\") {\n        nameB = sortColumn.getValue(a).toUpperCase(); // ignore upper and lowercase\n        nameA = sortColumn.getValue(b).toUpperCase(); // ignore upper and lowercase\n      }\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n    });\n  }\n\n  for (let i = 0; i < sortedFilteredPeople.length; i++) {\n    //loop through the responses and add them into an array with just the values I want\n    //rows is an array of people object\n    const person = sortedFilteredPeople[i];\n\n    //need to create a row for this person\n    rows.push(\n      <PeopleRow\n        rowNumber={i + 1}\n        first={person.name.first}\n        last={person.name.last}\n        email={person.email}\n      />\n    );\n  }\n  const headers = [];\n  for (let i = 0; i < columnArray.length; i++) {\n    //loop through the columns and add the column display into the html\n    headers.push(\n      <th className=\"text-left px-0\">\n        <button\n          className=\"btn btn-link text-white\"\n          onClick={() => {\n            setSortColumn(columnArray[i]);\n            //initally, sort by a-z, then z-a if it has been sorted\n            //3 states. start as unsorted, then ascending, then descending\n            //handle switching sort columns. If the prior target != current target\n            if (sortDirection === \"ascending\") {\n              setSortDirection(\"descending\");\n            } else {\n              setSortDirection(\"ascending\");\n            }\n          }}\n        >\n          {columnArray[i].displayName}\n        </button>\n      </th>\n    );\n  }\n\n  return (\n    <div>\n      <PeopleFilter value={filterText} onChange={onChange} />\n      <table className=\"table table-striped\">\n        <thead>\n          <tr className=\"bg-secondary\">\n            <th>#</th>\n            {headers}\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport { Get } from \"react-axios\";\r\nimport { PeopleTable } from \"./PeopleTable\";\r\n\r\nexport function PeopleRequest() {\r\n  return (\r\n    <Get url=\"https://randomuser.me/api/?results=50\">\r\n      {(error, response, isLoading, makeRequest, axios) => {\r\n        if (error) {\r\n          return (\r\n            <div>\r\n              Something bad happened: {error.message}{\" \"}\r\n              <button onClick={() => makeRequest({ params: { reload: true } })}>\r\n                Retry\r\n              </button>\r\n            </div>\r\n          );\r\n        } else if (isLoading) {\r\n          return <div>Loading...</div>;\r\n        } else if (response !== null) {\r\n          return <PeopleTable people={response.data.results} />;\r\n        }\r\n        return <div>Default message before request is made.</div>;\r\n      }}\r\n    </Get>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { PeopleRequest } from \"./components/PeopleRequest\";\n\nfunction App() {\n  return <PeopleRequest />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n//information (almost) always has to go down the tree in react\n"],"sourceRoot":""}